#################################################################################
#                      To make it wwork!!!!!
#
#    1. Create inbout rule In EKS Nodes's Security group to access port 30080 from 10.0.0.0/16.
#       It will allow NLB enpoints in public subnets to access EKS nodes.
# 
#   2. Run deployment as is. 
#       kubectl apply -f deployment/deployment.yaml
#
#   3. Create method for each resource and deploy to stage. 
#
#################################################################################

AWSTemplateFormatVersion: 2010-09-09
Description: "Creates VPC with 2 public, 2 private subs. Creates ElsticCache multizone Redis Cluster in private subss and Connects Lambda to it"
Parameters:
  MyIP:
    Type: String
    Description: Inbound rules from outside world would be liminite to this ip (just google what is my IP and put here the result :) )
Resources:

# First, a VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]

# Our VPC will need internet access:     
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: !Join ["-",[10.0.1.0/24, Public-A]] 

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: !Join ["-",[10.0.3.0/24, Public-B]] 

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      Tags:
      - Key: Name
        Value: !Join ["-",[10.0.2.0/24, Private-A]] 

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: !Join ["-",[10.0.4.0/24, Private-B]] 

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public

  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  NATGatewayA:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt ElasticIPAddressA.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
      - Key: Name
        Value: NatGateway-Subnet-A

  ElasticIPAddressA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGatewayB:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt ElasticIPAddressB.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
      - Key: Name
        Value: NatGateway-Subnet-B

  ElasticIPAddressB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    DependsOn: NATGatewayA
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: RouteTable-Private-A

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    DependsOn: NATGatewayB
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: RouteTable-Private-B

  PrivateRouteA:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGatewayA

  PrivateRouteB:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayB

  PrivateSubnetARouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  PrivateSubnetARouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB

  CFEksClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'Cf-Eks-Cluster-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ['eks.amazonaws.com']
          Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  CFEksNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'Cf-Eks-node-Instance-Role'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: ['ec2.amazonaws.com']
          Action: ['sts:AssumeRole']
      ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
                - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
                - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Path: /

  EKSMasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: 'EKS-Master-SG'
      GroupDescription: Open Port 443
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: !Ref MyIP

  MyCluster:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: POC-Cluster
      Version: '1.15'
      RoleArn: 
        !GetAtt 
        - CFEksClusterRole
        - Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EKSMasterSecurityGroup
        SubnetIds:
          - !Ref PublicSubnetA
          - !Ref PublicSubnetB
          - !Ref PrivateSubnetB
          - !Ref PrivateSubnetA
          
  EKSNodegroup:
    Type: 'AWS::EKS::Nodegroup'
    DependsOn: [ MyCluster, EventRule]
    Properties:
      ClusterName: POC-Cluster
      InstanceTypes: 
        - 't3.medium'
      AmiType: 'AL2_x86_64'
      NodegroupName: 'test-group'
      NodeRole:
        !GetAtt
        - CFEksNodeInstanceRole
        - Arn 
      ScalingConfig:
        MinSize: 2
        DesiredSize: 2
        MaxSize: 2
      Subnets:
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetA

  NLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    #DependsOn: PublicLoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: TCP
      HealthyThresholdCount: 2
      TargetType: instance
      Name: nlb-target-group
      Port: 30080
      Protocol: TCP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  NetworkLoadBalancerListener:
   Type: "AWS::ElasticLoadBalancingV2::Listener"
   Properties:
     DefaultActions:
       - Type: "forward"
         TargetGroupArn: !Ref NLBTargetGroup
     LoadBalancerArn: !Ref NetworkLoadBalancer
     Port: 80
     Protocol: TCP

  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
   # DependsOn: [InternetGateway, ALBSecurityGroup  ]
    Properties:
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: true
      Scheme: internal
      Name: 'NLB'
      Subnets:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      Type: network

  MyVpcLink:
    Type: AWS::ApiGateway::VpcLink
    Properties:
      Description: VPC Link from API Gateway to NLB
      Name:  EKS-VPC-LINK
      TargetArns:
        - !Ref NetworkLoadBalancer

  RestApi :
    Type : AWS::ApiGateway::RestApi
    Properties :
      Name: eks-api
      EndpointConfiguration:
        Types: 
        - REGIONAL

  TGLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'TGLambdaExecutionRole'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
      Path: /
      Policies:
        - PolicyName: TGLambdaExecutePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                Resource: '*'

  TGGroupLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Role: 
        !GetAtt 
          - TGLambdaExecutionRole
          - Arn
      Handler: index.lambda_handler
      Environment:
        Variables:
          NLB_ARN: !GetAtt NetworkLoadBalancer.LoadBalancerName
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from pprint import pprint
          LbName=os.environ['NLB_ARN']
          print('Loading function')
          elb = boto3.client('elbv2')
          def find_lb_arn(name):
          # describe load balancer name
              lbs_list_response = elb.describe_load_balancers(Names=[name])
              if lbs_list_response['ResponseMetadata']['HTTPStatusCode'] == 200:
                  print ("LBs list: " + ' '.join(p for p in [lb['LoadBalancerName']
                                            for lb in lbs_list_response['LoadBalancers']]))
                  lbArn = lbs_list_response['LoadBalancers'][0]['LoadBalancerArn']
              else:
                  print ("Describe lbs failed")
              return lbArn
          def lambda_handler(event, context):
              print("AutoScalingEvent()")
              print("Debug Event data = " + json.dumps(event, indent=2))
              
              target_id = event['detail']['EC2InstanceId']
              print("We are going to add InstanceID = " + target_id)
              
              #Find load balancer arn
              lbArn = find_lb_arn(LbName)
              print ("lbArn="+lbArn)
              
              # Register targets
              targets_list = [dict(Id=target_id)]
            
              describe_tg_response = elb.describe_target_groups(LoadBalancerArn=lbArn)
              #pprint(describe_tg_response)
              tgId = describe_tg_response['TargetGroups'][0]['TargetGroupArn']
              print ("tgID = " + tgId)
              #Register target in targetGroup
              reg_targets_response = elb.register_targets(TargetGroupArn=tgId, Targets=targets_list)
              if reg_targets_response['ResponseMetadata']['HTTPStatusCode'] == 200:
                  print ("Successfully registered targets")
              else:
                  print ("Register targets failed")
      Description: Invoke a function during stack creation.
      TracingConfig:
        Mode: Active

  IsAliveResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt 
      - RestApi
      - RootResourceId
      PathPart: isalive

  GetNodesResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt 
      - RestApi
      - RootResourceId
      PathPart: getnodes  

  GetInfoResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt 
      - RestApi
      - RootResourceId
      PathPart: getinfo  

  EventRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "EventRule"
      EventPattern: 
        source: 
          - "aws.autoscaling"
        detail-type: 
          - "EC2 Instance Launch Successful"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "TGGroupLambda"
              - "Arn"
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "TGGroupLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "EventRule"
          - "Arn"


