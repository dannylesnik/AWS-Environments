AWSTemplateFormatVersion: 2010-09-09
Description: "Creates VPC with 2 public, 2 private subs. Creates ElsticCache multizone Redis Cluster in private subss and Connects Lambda to it"
Parameters:
  MyIP:
    Type: String
    Description: Inbound rules from outside world would be liminite to this ip (just google what is my IP and put here the result :)

Resources:
# First, a VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: !Join ["-",[10.0.1.0/24, Public-A]] 

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: !Join ["-",[10.0.3.0/24, Public-B]] 

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      Tags:
      - Key: Name
        Value: !Join ["-",[10.0.2.0/24, Private-A]] 

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: !Join ["-",[10.0.4.0/24, Private-B]] 

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:

    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  NATGatewayA:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt ElasticIPAddressA.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
      - Key: Name
        Value: NatGateway-Subnet-A
        
  ElasticIPAddressA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGatewayB:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt ElasticIPAddressB.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
      - Key: Name
        Value: NatGateway-Subnet-B

  ElasticIPAddressB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    DependsOn: NATGatewayA
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: RouteTable-Private-A

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    DependsOn: NATGatewayB
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: RouteTable-Private-B

  PrivateRouteA:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGatewayA

  PrivateRouteB:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayB

  PrivateSubnetARouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  PrivateSubnetARouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB

  CFLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'CFLambdaExecutionRole'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ECSExecuteTaskPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                Resource: '*'

  ElasticacheSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Elasticache Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
          CidrIp: 0.0.0.0/0

  SubnetGroup:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      Description: Subnet Group for Example Replication Group
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB

  ReplicationGroup:
    Type: 'AWS::ElastiCache::ReplicationGroup'
    Properties:
        AutomaticFailoverEnabled: 'true'
        CacheNodeType: 'cache.t2.micro'
        CacheSubnetGroupName: !Ref SubnetGroup
        Engine: redis
        NumCacheClusters: 2
        Port: '6379'
        PreferredMaintenanceWindow: 'sun:22:00-sun:23:30'
        ReplicationGroupDescription: 'Sample replication group'
        SecurityGroupIds:
        - !GetAtt 
            - ElasticacheSecurityGroup
            - GroupId
        SnapshotRetentionLimit: '7'
        SnapshotWindow: '05:00-09:00'
        
  ConnectToRedisLambda:
    Type: 'AWS::Lambda::Function'
    Properties: 
      FunctionName: 'lamda-connect-redis'
      Role: 
        !GetAtt 
          - CFLambdaExecutionRole
          - Arn
      Runtime: 'go1.x'
      Handler: 'main'
      Code: 
        S3Bucket: 'cf-deploy-lamda'
        S3Key: 'main.zip'
      VpcConfig: 
        SecurityGroupIds: 
            - sg-013ad0894d9b61b27
        SubnetIds: 
            - subnet-04ac4db6f8f3956ec
            - subnet-0f87adf21cd6fd513