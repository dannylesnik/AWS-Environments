AWSTemplateFormatVersion: 2010-09-09

Parameters:
  MyIP:
    Type: String
    Description: Inbound rules from outside world would be liminite to this ip (just google what is my IP and put here the result :)


Mappings:
  RegionMap:
    us-east-1:
      AMI: 'ami-0ff8a91507f77f867'
    us-east-2:
      AMI: 'ami-03657b56516ab7912'
    us-west-1:
      AMI: 'ami-0bdb828fd58c52235'
    us-west-2:
      AMI: 'ami-01fee56b22f308154'
    eu-central-1:
      AMI: 'ami-00a205cb8e06c3c4e'
    eu-west-1:
      AMI: 'ami-047bb4163c506cd98'
    eu-north-1:
      AMI: 'ami-0653812935d0743fe'
    sa-east-1:
      AMI: 'ami-07b14488da8ea02a0'
    ap-southeast-1:
      AMI: 'ami-08569b978cc4dfa10'
    ap-southeast-2:
      AMI: 'ami-09b42976632b27e9b'
    ap-northeast-1:
      AMI: 'ami-06cd52961ce9f0d85'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: !Join ["-",[10.0.1.0/24, Public-A]] 

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Name
        Value: !Join ["-",[10.0.3.0/24, Public-B]] 

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      Tags:
      - Key: Name
        Value: !Join ["-",[10.0.2.0/24, Private-A]] 

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Name
        Value: !Join ["-",[10.0.4.0/24, Private-B]] 
  PublicRouteTable:

    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public

  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  NATGatewayA:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt ElasticIPAddressA.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
      - Key: Name
        Value: NatGateway-Subnet-A

  ElasticIPAddressA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGatewayB:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt ElasticIPAddressB.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags: 
      - Key: Name
        Value: NatGateway-Subnet-B

  ElasticIPAddressB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    DependsOn: NATGatewayA
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: RouteTable-Private-A

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    DependsOn: NATGatewayB
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: RouteTable-Private-B

  PrivateRouteA:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGatewayA

  PrivateRouteB:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayB

  PrivateSubnetARouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  PrivateSubnetARouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB
      
  ECSTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open Ports 5000 and 8080
      GroupName: 'ECSTaskSecurityGroup'
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '5000'
        ToPort: '5000'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp: 0.0.0.0/0

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: 'ALBSecurityGroup'
      GroupDescription: Open Port 80
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: !Ref MyIP

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: MyFargateCluster

  ECSTasksRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ECSExecuteTaskPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'es:*'
                  - 'logs:CreateLogGroup'
                Resource: '*'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/ecs/BusyBoxTASK'
      RetentionInDays: 1

  BusyBoxTASK:
    Type: AWS::ECS::TaskDefinition
    DependsOn: ElasticSearchCluster
    Properties:
      #Family: !Ref 'ServiceName'
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTasksRole
      Family: 'BusyBoxTASK'
      ContainerDefinitions:
        - Name: 'log_router'
          Image: 'public.ecr.aws/aws-observability/aws-for-fluent-bit:latest'
          Essential: true
          Cpu: 128
          Memory: 96
          FirelensConfiguration:
            Type: 'fluentbit'
            Options:
              config-file-type: 'file'
              config-file-value: '/fluent-bit/configs/parse-json.conf'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: 'firelens-container'
              awslogs-region: !Ref AWS::Region
              awslogs-create-group: 'true'
              awslogs-stream-prefix: 'firelens'
        - Name: 'BusyBox'
          Cpu: 128
          Memory: 96
          Image: dannylesnik/ref-http-busybox:0.1
          PortMappings:
            - ContainerPort: 5000
          HealthCheck:
            Command: 
              - 'CMD-SHELL'
              - 'curl -f http://127.0.0.1:5000/isalive || exit 1'
            Interval: 10
            Retries: 3
            StartPeriod: 3
            Timeout: 4
          Environment:
            - Name: 'HTTP_PORT'
              Value: '5000'
          LogConfiguration:
            LogDriver: 'awsfirelens'
            Options:
              Name: 'es'
              Host: !GetAtt ElasticSearchCluster.DomainEndpoint
              Port: 443
              Index: 'my_index2'
              Type: 'my_type'
              Aws_Auth: 'Off'
              Aws_Region: !Ref AWS::Region
              tls: 'On'


  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    DependsOn: LogGroup
    Properties:
      ServiceName:  'BusyBoxService'
      Cluster: !Ref 'ECSCluster'
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref 'ECSTaskSecurityGroup'
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
      TaskDefinition: !Ref 'BusyBoxTASK'

  ElasticSearchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: 'ElasticSearchSecurityGroup'
      GroupDescription: Open Port 443
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 10.0.0.0/16

  ElasticSearchCluster:
    Type: AWS::Elasticsearch::Domain
    Properties: 
      NodeToNodeEncryptionOptions:
        Enabled: false
      AccessPolicies:
        Version: '2012-10-17'
        Statement: 
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: 'es:*'
            Resource: '*'
      DomainName: elk-ecs-poc
        #VolumeType: "gp2"
      ElasticsearchVersion: '7.9'
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 10
        VolumeType: "gp2"
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled : false
        InstanceCount : 2
        InstanceType : 't2.small.elasticsearch'
        ZoneAwarenessConfig: 
            AvailabilityZoneCount: 2
        ZoneAwarenessEnabled : true
      VPCOptions:
        SubnetIds:
          - Ref: PrivateSubnetA
          - Ref: PrivateSubnetB
        SecurityGroupIds:
          - Ref: ElasticSearchSecurityGroup

  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: 'BastionHostSecurityGroup'
      GroupDescription: Open Port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref MyIP

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      KeyName: 'TMS-us-east-2'
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: BastionHost
        - Key: tr:application-asset-insight-id
          Value: '250146' 
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref 'PublicSubnetA'
          GroupSet: [!Ref 'BastionHostSecurityGroup']